#version 450 core

layout (local_size_x = 1, local_size_y = 1) in;
// The data in the texture is (position.y, velocity.y, normal.x, normal.z)
layout (binding = 0, rgba32f) uniform readonly image2D imgInput;
layout (binding = 1, rgba32f) uniform writeonly image2D imgOutput;

void main() {
  ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
  // float x = float(texelCoord.x) / gl_NumWorkGroups.x;
  // float y = float(texelCoord.y) / gl_NumWorkGroups.y;
  // vec2 coord = vec2(x, y);

  /* get vertex info */
  vec4 info = imageLoad(imgInput, texelCoord);

  ivec3 offset = ivec3(1, 1, 0);
  float hL = imageLoad(imgInput, texelCoord-offset.xz).x;
  float hR = imageLoad(imgInput, texelCoord+offset.xz).x;
  float hD = imageLoad(imgInput, texelCoord-offset.zy).x;
  float hU = imageLoad(imgInput, texelCoord+offset.zy).x;

  vec3 N = normalize(vec3(hL-hR, hD-hU, 2.0));

  info.zw = N.xy;

  /* update the normal */

  // ivec2(texelCoord.x + offset.x, texelCoord.y)).r
  float val1 = imageLoad(imgInput, texelCoord+offset.xz).r- info.r;
  vec3 dx = vec3(offset.x, val1, 0.0);
  // vec3 dx = vec3(delta.x, texture2D(imgInput, vec2(coord.x + delta.x, coord.y)).r - info.r, 0.0);
  //  vec2(coord.x, coord.y + delta.y)).r
  float val2 = imageLoad(imgInput, texelCoord+offset.zy).r- info.r;
  vec3 dy = vec3(0.0, val2, offset.y);
  // vec3 dy = vec3(0.0, texture2D(imgInput, vec2(coord.x, coord.y + delta.y)).r - info.r, delta.y);
  info.ba = normalize(cross(dy, dx)).xz;

  imageStore(imgOutput, texelCoord, info);
}